/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

import {assertInInjectionContext} from '../../di';
import {REQUIRED_UNSET_VALUE} from '../input/input_signal_node';

import {createModelSignal, ModelOptions, ModelSignal} from './model_signal';

export function modelFunction<T>(initialValue?: T): ModelSignal<T|undefined> {
  ngDevMode && assertInInjectionContext(model);

  return createModelSignal(initialValue);
}

export function modelRequiredFunction<T>(): ModelSignal<T> {
  ngDevMode && assertInInjectionContext(model);

  return createModelSignal(REQUIRED_UNSET_VALUE as T);
}

/**
 * `model` declares a writeable signal that is exposed as an input/output pair on the containing
 * directive. The input name is taken either from the class member or from the `alias` option.
 * The output name is generated by taking the input name and appending `Change`.
 *
 * The function exposes an API for also declaring required models via the
 * `model.required` function.
 *
 * @usageNotes
 * Initialize a model in your directive or component by declaring a
 * class field and initializing it with the `model()` or `model.required()`
 * function.
 *
 * ```ts
 * @Directive({..})
 * export class MyDir {
 *   firstName = model<string>();            // string|undefined
 *   lastName = model.required<string>();    // string
 *   age = model(0);                         // number
 * }
 * ```
 *
 * @developerPreview
 */
export interface ModelFunction {
  /**
   * Initializes a model with an initial value. If no explicit value
   * is specified, Angular will use `undefined`.
   *
   * Consider using `model.required` for models that don't need an
   * initial value.
   *
   * @developerPreview
   */
  <T>(): ModelSignal<T|undefined>;
  <T>(initialValue: T, opts?: ModelOptions): ModelSignal<T>;

  /**
   * Initializes a required model.
   *
   * Users of your directive/component need to bind to the input side of the model.
   * If unset, a compile time error will be reported.
   *
   * @developerPreview
   */
  required<T>(opts?: ModelOptions): ModelSignal<T>;
}

/**
 * `model` declares a writeable signal that is exposed as an input/output pair on the containing
 * directive. The input name is taken either from the class member or from the `alias` option.
 * The output name is generated by taking the input name and appending `Change`.
 *
 * Initializes a model with an initial value. If no explicit value
 * is specified, Angular will use `undefined`.
 *
 * Consider using `model.required` for models that don't need an
 * initial value.
 *
 * @usageNotes
 * Initialize a model in your directive or component by declaring a
 * class field and initializing it with the `model()` or `model.required()`
 * function.
 *
 * ```ts
 * @Directive({..})
 * export class MyDir {
 *   firstName = model<string>();            // string|undefined
 *   lastName = model.required<string>();    // string
 *   age = model(0);                         // number
 * }
 * ```
 *
 * @developerPreview
 */
export const model: ModelFunction = (() => {
  // Note: This may be considered a side-effect, but nothing will depend on
  // this assignment, unless this `model` constant export is accessed. It's a
  // self-contained side effect that is local to the user facing `model` export.
  (modelFunction as any).required = modelRequiredFunction;
  return modelFunction as (typeof modelFunction&{required: typeof modelRequiredFunction});
})();
